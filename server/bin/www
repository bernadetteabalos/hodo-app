#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const socketio = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "8001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// ********SOCKET IO CONNECTION AND EMITS

const io = socketio(server);

io.on("connection", (socket) => {
  console.log("SOMEONE HAS CONNECTED with ID:", socket.id);
  // sending this out to all users upon connection
  socket.emit("inital", {
    string: "HELLO WORLD FROM SERVER TO CLIENT",
  });

  // 2. Listening for elements change
  // info is an object {elements:elements, board_id: 1}
  socket.on("stage-change", (elements, board_id) => {
    console.log(
      "elements received from the client to the server -----> ",
      elements
    );
    console.log("board_id, line 44 -----> ", typeof board_id);
    // 3. sending out the elements to other users except the sender
    socket.broadcast.emit(`new-stage-${board_id}`, elements);
  });

  // Listening for line changes and then sending it out out to all users expect the sender
  socket.on("line-change", (lines, board_id) => {
    socket.broadcast.emit(`new-line-${board_id}`, lines);
  });

  // b. Listening for incoming chat message
  socket.on("chat-change", (newChatArray, board_id) => {
    //c.  send chat msg to others but the sender
    console.log("This is the new chat Array", newChatArray);
    socket.broadcast.emit(`update-chat-${board_id}`, newChatArray);
  });

  // ii. Listening for incoming expense change
  socket.on("budget-change", (newExpenses, board_id) => {
    // iii. sending out expenses to other users
    console.log("did I even hit the socket for the pie chart???");
    console.log("budget-change--->", newExpenses);
    socket.broadcast.emit(`update-budget-${board_id}`, newExpenses);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("Now listening on PORT 8001??...");
}
